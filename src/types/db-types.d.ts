import mongoose from "mongoose"


/**
 * This is a TypeScript type definition for a category object that includes an optional ID and a
 * required name property.
 * @property _id - This is a property that represents the unique identifier of a category. It is of
 * type mongoose.Schema.Types.ObjectId, which is a special type used by the Mongoose library for
 * generating unique identifiers for MongoDB documents.
 * @property {String} name - The name of a category.
 */
export type TCategory = {
    _id?: mongoose.Schema.Types.ObjectId,
    name: String
}

/**
 * The type TReport defines the structure of a report object with optional fields for ID,
 * location, reporter, description, timestamp, status, administrator ID, date of resolution, and
 * category ID.
 * @property {mongoose.Types.ObjectId} _id - This is an optional property that represents the unique identifier of a
 * report. It is of type mongoose.Types.ObjectId.
 * @property {String} where - This property represents the location where the reported issue
 * occurred.
 * @property {String} who - The person who reported the issue.
 * @property {String} what - The "what" property in the TReport type represents the description
 * or details of the reported issue or incident.
 * @property {Number} when - The "when" property in the TReport type represents the timestamp of
 * when the report was created or submitted. It is of type Number and is expected to be a Unix
 * timestamp (number of seconds since January 1, 1970).
 * @property {Boolean} isSolved - A boolean value indicating whether the report has been solved
 * or not.
 * @property AdministratorWhoSolvedID - This property is used to store the ID of the
 * administrator who solved the report. It is of type mongoose.Schema.Types.ObjectId, which is a
 * unique identifier generated by MongoDB.
 * @property {Number} dateOfSolved - This property represents the date when the report was
 * solved. It is a number data type, which is typically a Unix timestamp or a JavaScript Date
 * object converted to a number.
 * @property CategoryID - This property is a reference to the category that the report belongs
 * to. It is of type mongoose.Types.ObjectId, which is a unique identifier for a MongoDB
 * document.
 */
export type TReport = {
    _id?: mongoose.Types.ObjectId,
    where?: String,
    who?: String,
    what?: String,
    when?: Number,
    isSolved?: Boolean,
    AdministratorWhoSolvedID?: mongoose.Schema.Types.ObjectId,
    dateOfSolved?: Number,
    CategoryID?: mongoose.Types.ObjectId
}

/**
 * This is a TypeScript type definition for an administrator object with optional ID and name fields,
 * and required email and password fields.
 * @property {mongoose.Types.ObjectId} _id - This property is of type `mongoose.Types.ObjectId` and is optional. It is likely
 * used as a unique identifier for the administrator object in a MongoDB database.
 * @property {String} name - The name of the administrator. It is an optional property, which means it
 * may or may not be present in the object.
 * @property {String} email - The email property is a required string property of the TAdministrator
 * type. It is used to store the email address of an administrator.
 * @property {String} password - The "password" property is a string that represents the
 * administrator's password. It is likely encrypted or hashed for security purposes.
 */
export type TAdministrator = {
    _id?: mongoose.Types.ObjectId,
    name?: String,
    email: String,
    password: String
}